#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../src/app');
var debug = require('debug')('aplication:server');
var http = require('https');
require('dotenv').config();
require('../src/database');
let path = require('path');
var fs = require('fs'),
    config = require("config"),
    socket = require('socket.io');

options = {
  key: fs.readFileSync('./certs/node.key'),
  cert: fs.readFileSync('./certs/node.crt'),
};
/**
 * Get port from environment and store in Express.
 */
const port = config.get('port')
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

let chat = server.listen(port || 5000, function () {
  console.log(`Servidor escuchando en puerto ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);  
}

if (process.env.NODE_ENV === "production") {
  app.use(express.static("./client/build"));
  app.get("*", (req, res) => {
      res.sendFile(path.resolve(__dirname, "../../tode-frontend/build/index.html"));
  });
}

// Starting a socket on the specified server
let io = socket(chat);

io.on("connection", (socket) => {

  socket.on("new-message", (data) => {
      io.sockets.emit("new-message", data);
  });

});
