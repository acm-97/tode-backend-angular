#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../src/app');
var debug = require('debug')('aplication:server');
var http = require('https');
require('dotenv').config();
require('../src/database');
let path = require('path');
var fs = require('fs');
var config = require("config")

    

options = {
  key: fs.readFileSync('./certs/node.key'),
  cert: fs.readFileSync('./certs/node.crt'),
};
/**
 * Get port from config and store in Express.
 */
const port = config.get('port')
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(options, app);
var socketIO = require('socket.io')
var io = socketIO(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port || 5000, function () {
  console.log(`Servidor escuchando en https://localhost:${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);  
}

// Starting a socket on the specified server
io.on("connection", function(socket) {
  console.log("Connection established!");

  socket.on("newChatMessage", data => {
    io.emit("newChatMessage", data);
  });

  socket.on("disconnect", function() {
    console.log("Disconnected!");
  });
});
